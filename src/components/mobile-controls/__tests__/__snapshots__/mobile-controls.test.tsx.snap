// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`MobileControls component > should match a snapshot 1`] = `
{
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <div
        aria-hidden="true"
        class="mocked-styled-0 el-mobile-controls-bg"
      />
      <div
        class="mocked-styled-1 el-mobile-controls"
        id="test-static-id"
      >
        <button
          aria-controls="test-static-id"
          aria-disabled="false"
          class="el-floating-button el-button-size-medium el-button-icon-only el-button"
          data-variant="primary"
          role="button"
        >
          <div
            class="mocked-styled-3 el-button-spinner"
          />
          <span
            class="mocked-styled-9 el-icon"
          />
        </button>
      </div>
    </div>
  </body>,
  "container": <div>
    <div
      aria-hidden="true"
      class="mocked-styled-0 el-mobile-controls-bg"
    />
    <div
      class="mocked-styled-1 el-mobile-controls"
      id="test-static-id"
    >
      <button
        aria-controls="test-static-id"
        aria-disabled="false"
        class="el-floating-button el-button-size-medium el-button-icon-only el-button"
        data-variant="primary"
        role="button"
      >
        <div
          class="mocked-styled-3 el-button-spinner"
        />
        <span
          class="mocked-styled-9 el-icon"
        />
      </button>
    </div>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;

exports[`MobileControls component > should match a snapshot with full props 1`] = `
{
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <div
        aria-hidden="true"
        class="mocked-styled-0 el-mobile-controls-bg"
      />
      <div
        class="el-mobile-controls-visible el-mobile-controls"
        id="test-static-id"
      >
        <a
          aria-hidden="true"
          class="mocked-styled-2 el-mobile-control-item"
          role="button"
        >
          Item One
        </a>
        <a
          aria-hidden="true"
          class="mocked-styled-2 el-mobile-control-item"
          role="button"
        >
          Item Two
        </a>
        <a
          aria-hidden="true"
          class="mocked-styled-2 el-mobile-control-item"
          role="button"
        >
          Item Three
        </a>
        <button
          aria-controls="test-static-id"
          aria-disabled="false"
          class="el-floating-button el-button-size-medium el-button-icon-only el-button"
          data-variant="primary"
          role="button"
        >
          <div
            class="mocked-styled-3 el-button-spinner"
          />
          <span
            class="mocked-styled-9 el-icon"
          />
        </button>
      </div>
    </div>
  </body>,
  "container": <div>
    <div
      aria-hidden="true"
      class="mocked-styled-0 el-mobile-controls-bg"
    />
    <div
      class="el-mobile-controls-visible el-mobile-controls"
      id="test-static-id"
    >
      <a
        aria-hidden="true"
        class="mocked-styled-2 el-mobile-control-item"
        role="button"
      >
        Item One
      </a>
      <a
        aria-hidden="true"
        class="mocked-styled-2 el-mobile-control-item"
        role="button"
      >
        Item Two
      </a>
      <a
        aria-hidden="true"
        class="mocked-styled-2 el-mobile-control-item"
        role="button"
      >
        Item Three
      </a>
      <button
        aria-controls="test-static-id"
        aria-disabled="false"
        class="el-floating-button el-button-size-medium el-button-icon-only el-button"
        data-variant="primary"
        role="button"
      >
        <div
          class="mocked-styled-3 el-button-spinner"
        />
        <span
          class="mocked-styled-9 el-icon"
        />
      </button>
    </div>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;
