// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`MobileControls component should match a snapshot 1`] = `
{
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <mock-styled.div
        aria-hidden="true"
        classname=""
      />
      <mock-styled.div
        classname=""
        id=":r0:"
      >
        <mock-styled.button
          aria-controls=":r0:"
          classname="mock-css. mock-css."
        >
          <mock-styled.div />
          <mock-styled.span
            classname=""
          >
            <svg
              role="img"
              title="Icon image with name menu"
            />
          </mock-styled.span>
        </mock-styled.button>
      </mock-styled.div>
    </div>
  </body>,
  "container": <div>
    <mock-styled.div
      aria-hidden="true"
      classname=""
    />
    <mock-styled.div
      classname=""
      id=":r0:"
    >
      <mock-styled.button
        aria-controls=":r0:"
        classname="mock-css. mock-css."
      >
        <mock-styled.div />
        <mock-styled.span
          classname=""
        >
          <svg
            role="img"
            title="Icon image with name menu"
          />
        </mock-styled.span>
      </mock-styled.button>
    </mock-styled.div>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;

exports[`MobileControls component should match a snapshot with full props 1`] = `
{
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <mock-styled.div
        aria-hidden="true"
        classname=""
      />
      <mock-styled.div
        classname="mock-css.
  display: flex;
"
        id=":r1:"
      >
        <mock-styled.a
          aria-hidden="true"
          classname=""
          role="button"
        >
          Item One
        </mock-styled.a>
        <mock-styled.a
          aria-hidden="true"
          classname=""
          role="button"
        >
          Item Two
        </mock-styled.a>
        <mock-styled.a
          aria-hidden="true"
          classname=""
          role="button"
        >
          Item Three
        </mock-styled.a>
        <mock-styled.button
          aria-controls=":r1:"
          classname="mock-css. mock-css."
        >
          <mock-styled.div />
          <mock-styled.span
            classname=""
          >
            <svg
              role="img"
              title="Icon image with name add"
            />
          </mock-styled.span>
        </mock-styled.button>
      </mock-styled.div>
    </div>
  </body>,
  "container": <div>
    <mock-styled.div
      aria-hidden="true"
      classname=""
    />
    <mock-styled.div
      classname="mock-css.
  display: flex;
"
      id=":r1:"
    >
      <mock-styled.a
        aria-hidden="true"
        classname=""
        role="button"
      >
        Item One
      </mock-styled.a>
      <mock-styled.a
        aria-hidden="true"
        classname=""
        role="button"
      >
        Item Two
      </mock-styled.a>
      <mock-styled.a
        aria-hidden="true"
        classname=""
        role="button"
      >
        Item Three
      </mock-styled.a>
      <mock-styled.button
        aria-controls=":r1:"
        classname="mock-css. mock-css."
      >
        <mock-styled.div />
        <mock-styled.span
          classname=""
        >
          <svg
            role="img"
            title="Icon image with name add"
          />
        </mock-styled.span>
      </mock-styled.button>
    </mock-styled.div>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;
