// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Typography Base Text2XL should match a snapshot 1`] = `
{
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <div
        class="mock-css.
  font-family: var(--font-sans-serif);
  color: var(--color-black);
  font-size: 15px;
  line-height: 24px;
  font-weight: 400;

  &., {
    color: var(--color-grey-500);
  }

  &., {
    color: var(--color-grey-400);

    a {
      color: var(--color-grey-400);
    }
  }

  &., {
    font-weight: var(--font-weight-default);
  }

  &., {
    font-weight: var(--font-weight-medium);
  }

  &., {
    font-weight: var(--font-weight-bold);
  }

  &., {
    text-align: center;
  }

  &., {
    text-transform: capitalize;
  }

  &., {
    text-transform: uppercase;
  }

  &., {
    font-style: italic;
  }

  &., {
    margin-bottom: 0;
  }

  &., {
    margin-bottom: 0.5rem;
  }

  &., {
    margin-bottom: 1.5rem;
  }

  &., {
    color: var(--intent-primary);
  }

  &., {
    color: var(--intent-neutral);
  }

  &., {
    color: var(--intent-success);
  }

  &., {
    color: var(--intent-pending);
  }

  &., {
    color: var(--intent-warning);
  }

  &., {
    color: var(--intent-danger);
  }

  &., {
    color: var(--intent-default);
  }
 mock-css.
  font-size: 24px;
  line-height: 32px;
"
      >
        I am a Text2XL
      </div>
    </div>
  </body>,
  "container": <div>
    <div
      class="mock-css.
  font-family: var(--font-sans-serif);
  color: var(--color-black);
  font-size: 15px;
  line-height: 24px;
  font-weight: 400;

  &., {
    color: var(--color-grey-500);
  }

  &., {
    color: var(--color-grey-400);

    a {
      color: var(--color-grey-400);
    }
  }

  &., {
    font-weight: var(--font-weight-default);
  }

  &., {
    font-weight: var(--font-weight-medium);
  }

  &., {
    font-weight: var(--font-weight-bold);
  }

  &., {
    text-align: center;
  }

  &., {
    text-transform: capitalize;
  }

  &., {
    text-transform: uppercase;
  }

  &., {
    font-style: italic;
  }

  &., {
    margin-bottom: 0;
  }

  &., {
    margin-bottom: 0.5rem;
  }

  &., {
    margin-bottom: 1.5rem;
  }

  &., {
    color: var(--intent-primary);
  }

  &., {
    color: var(--intent-neutral);
  }

  &., {
    color: var(--intent-success);
  }

  &., {
    color: var(--intent-pending);
  }

  &., {
    color: var(--intent-warning);
  }

  &., {
    color: var(--intent-danger);
  }

  &., {
    color: var(--intent-default);
  }
 mock-css.
  font-size: 24px;
  line-height: 32px;
"
    >
      I am a Text2XL
    </div>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;

exports[`Typography Base Text2XL should match a snapshot with all modifiers 1`] = `
{
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <div
        class="mock-css.
  font-family: var(--font-sans-serif);
  color: var(--color-black);
  font-size: 15px;
  line-height: 24px;
  font-weight: 400;

  &., {
    color: var(--color-grey-500);
  }

  &., {
    color: var(--color-grey-400);

    a {
      color: var(--color-grey-400);
    }
  }

  &., {
    font-weight: var(--font-weight-default);
  }

  &., {
    font-weight: var(--font-weight-medium);
  }

  &., {
    font-weight: var(--font-weight-bold);
  }

  &., {
    text-align: center;
  }

  &., {
    text-transform: capitalize;
  }

  &., {
    text-transform: uppercase;
  }

  &., {
    font-style: italic;
  }

  &., {
    margin-bottom: 0;
  }

  &., {
    margin-bottom: 0.5rem;
  }

  &., {
    margin-bottom: 1.5rem;
  }

  &., {
    color: var(--intent-primary);
  }

  &., {
    color: var(--intent-neutral);
  }

  &., {
    color: var(--intent-success);
  }

  &., {
    color: var(--intent-pending);
  }

  &., {
    color: var(--intent-warning);
  }

  &., {
    color: var(--intent-danger);
  }

  &., {
    color: var(--intent-default);
  }
 mock-css.
  font-size: 24px;
  line-height: 32px;
 mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css."
      >
        I am a Text2XL
      </div>
    </div>
  </body>,
  "container": <div>
    <div
      class="mock-css.
  font-family: var(--font-sans-serif);
  color: var(--color-black);
  font-size: 15px;
  line-height: 24px;
  font-weight: 400;

  &., {
    color: var(--color-grey-500);
  }

  &., {
    color: var(--color-grey-400);

    a {
      color: var(--color-grey-400);
    }
  }

  &., {
    font-weight: var(--font-weight-default);
  }

  &., {
    font-weight: var(--font-weight-medium);
  }

  &., {
    font-weight: var(--font-weight-bold);
  }

  &., {
    text-align: center;
  }

  &., {
    text-transform: capitalize;
  }

  &., {
    text-transform: uppercase;
  }

  &., {
    font-style: italic;
  }

  &., {
    margin-bottom: 0;
  }

  &., {
    margin-bottom: 0.5rem;
  }

  &., {
    margin-bottom: 1.5rem;
  }

  &., {
    color: var(--intent-primary);
  }

  &., {
    color: var(--intent-neutral);
  }

  &., {
    color: var(--intent-success);
  }

  &., {
    color: var(--intent-pending);
  }

  &., {
    color: var(--intent-warning);
  }

  &., {
    color: var(--intent-danger);
  }

  &., {
    color: var(--intent-default);
  }
 mock-css.
  font-size: 24px;
  line-height: 32px;
 mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css."
    >
      I am a Text2XL
    </div>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;

exports[`Typography Base Text2XS should match a snapshot 1`] = `
{
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <div
        class="mock-css.
  font-family: var(--font-sans-serif);
  color: var(--color-black);
  font-size: 15px;
  line-height: 24px;
  font-weight: 400;

  &., {
    color: var(--color-grey-500);
  }

  &., {
    color: var(--color-grey-400);

    a {
      color: var(--color-grey-400);
    }
  }

  &., {
    font-weight: var(--font-weight-default);
  }

  &., {
    font-weight: var(--font-weight-medium);
  }

  &., {
    font-weight: var(--font-weight-bold);
  }

  &., {
    text-align: center;
  }

  &., {
    text-transform: capitalize;
  }

  &., {
    text-transform: uppercase;
  }

  &., {
    font-style: italic;
  }

  &., {
    margin-bottom: 0;
  }

  &., {
    margin-bottom: 0.5rem;
  }

  &., {
    margin-bottom: 1.5rem;
  }

  &., {
    color: var(--intent-primary);
  }

  &., {
    color: var(--intent-neutral);
  }

  &., {
    color: var(--intent-success);
  }

  &., {
    color: var(--intent-pending);
  }

  &., {
    color: var(--intent-warning);
  }

  &., {
    color: var(--intent-danger);
  }

  &., {
    color: var(--intent-default);
  }
 mock-css.
  font-size: 12px;
  line-height: 16px;
"
      >
        I am a Text2XS
      </div>
    </div>
  </body>,
  "container": <div>
    <div
      class="mock-css.
  font-family: var(--font-sans-serif);
  color: var(--color-black);
  font-size: 15px;
  line-height: 24px;
  font-weight: 400;

  &., {
    color: var(--color-grey-500);
  }

  &., {
    color: var(--color-grey-400);

    a {
      color: var(--color-grey-400);
    }
  }

  &., {
    font-weight: var(--font-weight-default);
  }

  &., {
    font-weight: var(--font-weight-medium);
  }

  &., {
    font-weight: var(--font-weight-bold);
  }

  &., {
    text-align: center;
  }

  &., {
    text-transform: capitalize;
  }

  &., {
    text-transform: uppercase;
  }

  &., {
    font-style: italic;
  }

  &., {
    margin-bottom: 0;
  }

  &., {
    margin-bottom: 0.5rem;
  }

  &., {
    margin-bottom: 1.5rem;
  }

  &., {
    color: var(--intent-primary);
  }

  &., {
    color: var(--intent-neutral);
  }

  &., {
    color: var(--intent-success);
  }

  &., {
    color: var(--intent-pending);
  }

  &., {
    color: var(--intent-warning);
  }

  &., {
    color: var(--intent-danger);
  }

  &., {
    color: var(--intent-default);
  }
 mock-css.
  font-size: 12px;
  line-height: 16px;
"
    >
      I am a Text2XS
    </div>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;

exports[`Typography Base Text2XS should match a snapshot with all modifiers 1`] = `
{
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <div
        class="mock-css.
  font-family: var(--font-sans-serif);
  color: var(--color-black);
  font-size: 15px;
  line-height: 24px;
  font-weight: 400;

  &., {
    color: var(--color-grey-500);
  }

  &., {
    color: var(--color-grey-400);

    a {
      color: var(--color-grey-400);
    }
  }

  &., {
    font-weight: var(--font-weight-default);
  }

  &., {
    font-weight: var(--font-weight-medium);
  }

  &., {
    font-weight: var(--font-weight-bold);
  }

  &., {
    text-align: center;
  }

  &., {
    text-transform: capitalize;
  }

  &., {
    text-transform: uppercase;
  }

  &., {
    font-style: italic;
  }

  &., {
    margin-bottom: 0;
  }

  &., {
    margin-bottom: 0.5rem;
  }

  &., {
    margin-bottom: 1.5rem;
  }

  &., {
    color: var(--intent-primary);
  }

  &., {
    color: var(--intent-neutral);
  }

  &., {
    color: var(--intent-success);
  }

  &., {
    color: var(--intent-pending);
  }

  &., {
    color: var(--intent-warning);
  }

  &., {
    color: var(--intent-danger);
  }

  &., {
    color: var(--intent-default);
  }
 mock-css.
  font-size: 12px;
  line-height: 16px;
 mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css."
      >
        I am a Text2XS
      </div>
    </div>
  </body>,
  "container": <div>
    <div
      class="mock-css.
  font-family: var(--font-sans-serif);
  color: var(--color-black);
  font-size: 15px;
  line-height: 24px;
  font-weight: 400;

  &., {
    color: var(--color-grey-500);
  }

  &., {
    color: var(--color-grey-400);

    a {
      color: var(--color-grey-400);
    }
  }

  &., {
    font-weight: var(--font-weight-default);
  }

  &., {
    font-weight: var(--font-weight-medium);
  }

  &., {
    font-weight: var(--font-weight-bold);
  }

  &., {
    text-align: center;
  }

  &., {
    text-transform: capitalize;
  }

  &., {
    text-transform: uppercase;
  }

  &., {
    font-style: italic;
  }

  &., {
    margin-bottom: 0;
  }

  &., {
    margin-bottom: 0.5rem;
  }

  &., {
    margin-bottom: 1.5rem;
  }

  &., {
    color: var(--intent-primary);
  }

  &., {
    color: var(--intent-neutral);
  }

  &., {
    color: var(--intent-success);
  }

  &., {
    color: var(--intent-pending);
  }

  &., {
    color: var(--intent-warning);
  }

  &., {
    color: var(--intent-danger);
  }

  &., {
    color: var(--intent-default);
  }
 mock-css.
  font-size: 12px;
  line-height: 16px;
 mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css."
    >
      I am a Text2XS
    </div>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;

exports[`Typography Base Text3XL should match a snapshot 1`] = `
{
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <div
        class="mock-css.
  font-family: var(--font-sans-serif);
  color: var(--color-black);
  font-size: 15px;
  line-height: 24px;
  font-weight: 400;

  &., {
    color: var(--color-grey-500);
  }

  &., {
    color: var(--color-grey-400);

    a {
      color: var(--color-grey-400);
    }
  }

  &., {
    font-weight: var(--font-weight-default);
  }

  &., {
    font-weight: var(--font-weight-medium);
  }

  &., {
    font-weight: var(--font-weight-bold);
  }

  &., {
    text-align: center;
  }

  &., {
    text-transform: capitalize;
  }

  &., {
    text-transform: uppercase;
  }

  &., {
    font-style: italic;
  }

  &., {
    margin-bottom: 0;
  }

  &., {
    margin-bottom: 0.5rem;
  }

  &., {
    margin-bottom: 1.5rem;
  }

  &., {
    color: var(--intent-primary);
  }

  &., {
    color: var(--intent-neutral);
  }

  &., {
    color: var(--intent-success);
  }

  &., {
    color: var(--intent-pending);
  }

  &., {
    color: var(--intent-warning);
  }

  &., {
    color: var(--intent-danger);
  }

  &., {
    color: var(--intent-default);
  }
 mock-css.
  font-size: 32px;
  line-height: 40px;
"
      >
        I am a Text3XL
      </div>
    </div>
  </body>,
  "container": <div>
    <div
      class="mock-css.
  font-family: var(--font-sans-serif);
  color: var(--color-black);
  font-size: 15px;
  line-height: 24px;
  font-weight: 400;

  &., {
    color: var(--color-grey-500);
  }

  &., {
    color: var(--color-grey-400);

    a {
      color: var(--color-grey-400);
    }
  }

  &., {
    font-weight: var(--font-weight-default);
  }

  &., {
    font-weight: var(--font-weight-medium);
  }

  &., {
    font-weight: var(--font-weight-bold);
  }

  &., {
    text-align: center;
  }

  &., {
    text-transform: capitalize;
  }

  &., {
    text-transform: uppercase;
  }

  &., {
    font-style: italic;
  }

  &., {
    margin-bottom: 0;
  }

  &., {
    margin-bottom: 0.5rem;
  }

  &., {
    margin-bottom: 1.5rem;
  }

  &., {
    color: var(--intent-primary);
  }

  &., {
    color: var(--intent-neutral);
  }

  &., {
    color: var(--intent-success);
  }

  &., {
    color: var(--intent-pending);
  }

  &., {
    color: var(--intent-warning);
  }

  &., {
    color: var(--intent-danger);
  }

  &., {
    color: var(--intent-default);
  }
 mock-css.
  font-size: 32px;
  line-height: 40px;
"
    >
      I am a Text3XL
    </div>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;

exports[`Typography Base Text3XL should match a snapshot with all modifiers 1`] = `
{
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <div
        class="mock-css.
  font-family: var(--font-sans-serif);
  color: var(--color-black);
  font-size: 15px;
  line-height: 24px;
  font-weight: 400;

  &., {
    color: var(--color-grey-500);
  }

  &., {
    color: var(--color-grey-400);

    a {
      color: var(--color-grey-400);
    }
  }

  &., {
    font-weight: var(--font-weight-default);
  }

  &., {
    font-weight: var(--font-weight-medium);
  }

  &., {
    font-weight: var(--font-weight-bold);
  }

  &., {
    text-align: center;
  }

  &., {
    text-transform: capitalize;
  }

  &., {
    text-transform: uppercase;
  }

  &., {
    font-style: italic;
  }

  &., {
    margin-bottom: 0;
  }

  &., {
    margin-bottom: 0.5rem;
  }

  &., {
    margin-bottom: 1.5rem;
  }

  &., {
    color: var(--intent-primary);
  }

  &., {
    color: var(--intent-neutral);
  }

  &., {
    color: var(--intent-success);
  }

  &., {
    color: var(--intent-pending);
  }

  &., {
    color: var(--intent-warning);
  }

  &., {
    color: var(--intent-danger);
  }

  &., {
    color: var(--intent-default);
  }
 mock-css.
  font-size: 32px;
  line-height: 40px;
 mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css."
      >
        I am a Text3XL
      </div>
    </div>
  </body>,
  "container": <div>
    <div
      class="mock-css.
  font-family: var(--font-sans-serif);
  color: var(--color-black);
  font-size: 15px;
  line-height: 24px;
  font-weight: 400;

  &., {
    color: var(--color-grey-500);
  }

  &., {
    color: var(--color-grey-400);

    a {
      color: var(--color-grey-400);
    }
  }

  &., {
    font-weight: var(--font-weight-default);
  }

  &., {
    font-weight: var(--font-weight-medium);
  }

  &., {
    font-weight: var(--font-weight-bold);
  }

  &., {
    text-align: center;
  }

  &., {
    text-transform: capitalize;
  }

  &., {
    text-transform: uppercase;
  }

  &., {
    font-style: italic;
  }

  &., {
    margin-bottom: 0;
  }

  &., {
    margin-bottom: 0.5rem;
  }

  &., {
    margin-bottom: 1.5rem;
  }

  &., {
    color: var(--intent-primary);
  }

  &., {
    color: var(--intent-neutral);
  }

  &., {
    color: var(--intent-success);
  }

  &., {
    color: var(--intent-pending);
  }

  &., {
    color: var(--intent-warning);
  }

  &., {
    color: var(--intent-danger);
  }

  &., {
    color: var(--intent-default);
  }
 mock-css.
  font-size: 32px;
  line-height: 40px;
 mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css."
    >
      I am a Text3XL
    </div>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;

exports[`Typography Base TextBase should match a snapshot 1`] = `
{
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <div
        class="mock-css.
  font-family: var(--font-sans-serif);
  color: var(--color-black);
  font-size: 15px;
  line-height: 24px;
  font-weight: 400;

  &., {
    color: var(--color-grey-500);
  }

  &., {
    color: var(--color-grey-400);

    a {
      color: var(--color-grey-400);
    }
  }

  &., {
    font-weight: var(--font-weight-default);
  }

  &., {
    font-weight: var(--font-weight-medium);
  }

  &., {
    font-weight: var(--font-weight-bold);
  }

  &., {
    text-align: center;
  }

  &., {
    text-transform: capitalize;
  }

  &., {
    text-transform: uppercase;
  }

  &., {
    font-style: italic;
  }

  &., {
    margin-bottom: 0;
  }

  &., {
    margin-bottom: 0.5rem;
  }

  &., {
    margin-bottom: 1.5rem;
  }

  &., {
    color: var(--intent-primary);
  }

  &., {
    color: var(--intent-neutral);
  }

  &., {
    color: var(--intent-success);
  }

  &., {
    color: var(--intent-pending);
  }

  &., {
    color: var(--intent-warning);
  }

  &., {
    color: var(--intent-danger);
  }

  &., {
    color: var(--intent-default);
  }
"
      >
        I am a TextBase
      </div>
    </div>
  </body>,
  "container": <div>
    <div
      class="mock-css.
  font-family: var(--font-sans-serif);
  color: var(--color-black);
  font-size: 15px;
  line-height: 24px;
  font-weight: 400;

  &., {
    color: var(--color-grey-500);
  }

  &., {
    color: var(--color-grey-400);

    a {
      color: var(--color-grey-400);
    }
  }

  &., {
    font-weight: var(--font-weight-default);
  }

  &., {
    font-weight: var(--font-weight-medium);
  }

  &., {
    font-weight: var(--font-weight-bold);
  }

  &., {
    text-align: center;
  }

  &., {
    text-transform: capitalize;
  }

  &., {
    text-transform: uppercase;
  }

  &., {
    font-style: italic;
  }

  &., {
    margin-bottom: 0;
  }

  &., {
    margin-bottom: 0.5rem;
  }

  &., {
    margin-bottom: 1.5rem;
  }

  &., {
    color: var(--intent-primary);
  }

  &., {
    color: var(--intent-neutral);
  }

  &., {
    color: var(--intent-success);
  }

  &., {
    color: var(--intent-pending);
  }

  &., {
    color: var(--intent-warning);
  }

  &., {
    color: var(--intent-danger);
  }

  &., {
    color: var(--intent-default);
  }
"
    >
      I am a TextBase
    </div>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;

exports[`Typography Base TextBase should match a snapshot with all modifiers 1`] = `
{
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <div
        class="mock-css.
  font-family: var(--font-sans-serif);
  color: var(--color-black);
  font-size: 15px;
  line-height: 24px;
  font-weight: 400;

  &., {
    color: var(--color-grey-500);
  }

  &., {
    color: var(--color-grey-400);

    a {
      color: var(--color-grey-400);
    }
  }

  &., {
    font-weight: var(--font-weight-default);
  }

  &., {
    font-weight: var(--font-weight-medium);
  }

  &., {
    font-weight: var(--font-weight-bold);
  }

  &., {
    text-align: center;
  }

  &., {
    text-transform: capitalize;
  }

  &., {
    text-transform: uppercase;
  }

  &., {
    font-style: italic;
  }

  &., {
    margin-bottom: 0;
  }

  &., {
    margin-bottom: 0.5rem;
  }

  &., {
    margin-bottom: 1.5rem;
  }

  &., {
    color: var(--intent-primary);
  }

  &., {
    color: var(--intent-neutral);
  }

  &., {
    color: var(--intent-success);
  }

  &., {
    color: var(--intent-pending);
  }

  &., {
    color: var(--intent-warning);
  }

  &., {
    color: var(--intent-danger);
  }

  &., {
    color: var(--intent-default);
  }
 mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css."
      >
        I am a TextBase
      </div>
    </div>
  </body>,
  "container": <div>
    <div
      class="mock-css.
  font-family: var(--font-sans-serif);
  color: var(--color-black);
  font-size: 15px;
  line-height: 24px;
  font-weight: 400;

  &., {
    color: var(--color-grey-500);
  }

  &., {
    color: var(--color-grey-400);

    a {
      color: var(--color-grey-400);
    }
  }

  &., {
    font-weight: var(--font-weight-default);
  }

  &., {
    font-weight: var(--font-weight-medium);
  }

  &., {
    font-weight: var(--font-weight-bold);
  }

  &., {
    text-align: center;
  }

  &., {
    text-transform: capitalize;
  }

  &., {
    text-transform: uppercase;
  }

  &., {
    font-style: italic;
  }

  &., {
    margin-bottom: 0;
  }

  &., {
    margin-bottom: 0.5rem;
  }

  &., {
    margin-bottom: 1.5rem;
  }

  &., {
    color: var(--intent-primary);
  }

  &., {
    color: var(--intent-neutral);
  }

  &., {
    color: var(--intent-success);
  }

  &., {
    color: var(--intent-pending);
  }

  &., {
    color: var(--intent-warning);
  }

  &., {
    color: var(--intent-danger);
  }

  &., {
    color: var(--intent-default);
  }
 mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css."
    >
      I am a TextBase
    </div>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;

exports[`Typography Base TextL should match a snapshot 1`] = `
{
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <div
        class="mock-css.
  font-family: var(--font-sans-serif);
  color: var(--color-black);
  font-size: 15px;
  line-height: 24px;
  font-weight: 400;

  &., {
    color: var(--color-grey-500);
  }

  &., {
    color: var(--color-grey-400);

    a {
      color: var(--color-grey-400);
    }
  }

  &., {
    font-weight: var(--font-weight-default);
  }

  &., {
    font-weight: var(--font-weight-medium);
  }

  &., {
    font-weight: var(--font-weight-bold);
  }

  &., {
    text-align: center;
  }

  &., {
    text-transform: capitalize;
  }

  &., {
    text-transform: uppercase;
  }

  &., {
    font-style: italic;
  }

  &., {
    margin-bottom: 0;
  }

  &., {
    margin-bottom: 0.5rem;
  }

  &., {
    margin-bottom: 1.5rem;
  }

  &., {
    color: var(--intent-primary);
  }

  &., {
    color: var(--intent-neutral);
  }

  &., {
    color: var(--intent-success);
  }

  &., {
    color: var(--intent-pending);
  }

  &., {
    color: var(--intent-warning);
  }

  &., {
    color: var(--intent-danger);
  }

  &., {
    color: var(--intent-default);
  }
 mock-css.
  font-size: 18px;
  line-height: 24px;
"
      >
        I am a TextL
      </div>
    </div>
  </body>,
  "container": <div>
    <div
      class="mock-css.
  font-family: var(--font-sans-serif);
  color: var(--color-black);
  font-size: 15px;
  line-height: 24px;
  font-weight: 400;

  &., {
    color: var(--color-grey-500);
  }

  &., {
    color: var(--color-grey-400);

    a {
      color: var(--color-grey-400);
    }
  }

  &., {
    font-weight: var(--font-weight-default);
  }

  &., {
    font-weight: var(--font-weight-medium);
  }

  &., {
    font-weight: var(--font-weight-bold);
  }

  &., {
    text-align: center;
  }

  &., {
    text-transform: capitalize;
  }

  &., {
    text-transform: uppercase;
  }

  &., {
    font-style: italic;
  }

  &., {
    margin-bottom: 0;
  }

  &., {
    margin-bottom: 0.5rem;
  }

  &., {
    margin-bottom: 1.5rem;
  }

  &., {
    color: var(--intent-primary);
  }

  &., {
    color: var(--intent-neutral);
  }

  &., {
    color: var(--intent-success);
  }

  &., {
    color: var(--intent-pending);
  }

  &., {
    color: var(--intent-warning);
  }

  &., {
    color: var(--intent-danger);
  }

  &., {
    color: var(--intent-default);
  }
 mock-css.
  font-size: 18px;
  line-height: 24px;
"
    >
      I am a TextL
    </div>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;

exports[`Typography Base TextL should match a snapshot with all modifiers 1`] = `
{
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <div
        class="mock-css.
  font-family: var(--font-sans-serif);
  color: var(--color-black);
  font-size: 15px;
  line-height: 24px;
  font-weight: 400;

  &., {
    color: var(--color-grey-500);
  }

  &., {
    color: var(--color-grey-400);

    a {
      color: var(--color-grey-400);
    }
  }

  &., {
    font-weight: var(--font-weight-default);
  }

  &., {
    font-weight: var(--font-weight-medium);
  }

  &., {
    font-weight: var(--font-weight-bold);
  }

  &., {
    text-align: center;
  }

  &., {
    text-transform: capitalize;
  }

  &., {
    text-transform: uppercase;
  }

  &., {
    font-style: italic;
  }

  &., {
    margin-bottom: 0;
  }

  &., {
    margin-bottom: 0.5rem;
  }

  &., {
    margin-bottom: 1.5rem;
  }

  &., {
    color: var(--intent-primary);
  }

  &., {
    color: var(--intent-neutral);
  }

  &., {
    color: var(--intent-success);
  }

  &., {
    color: var(--intent-pending);
  }

  &., {
    color: var(--intent-warning);
  }

  &., {
    color: var(--intent-danger);
  }

  &., {
    color: var(--intent-default);
  }
 mock-css.
  font-size: 18px;
  line-height: 24px;
 mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css."
      >
        I am a TextL
      </div>
    </div>
  </body>,
  "container": <div>
    <div
      class="mock-css.
  font-family: var(--font-sans-serif);
  color: var(--color-black);
  font-size: 15px;
  line-height: 24px;
  font-weight: 400;

  &., {
    color: var(--color-grey-500);
  }

  &., {
    color: var(--color-grey-400);

    a {
      color: var(--color-grey-400);
    }
  }

  &., {
    font-weight: var(--font-weight-default);
  }

  &., {
    font-weight: var(--font-weight-medium);
  }

  &., {
    font-weight: var(--font-weight-bold);
  }

  &., {
    text-align: center;
  }

  &., {
    text-transform: capitalize;
  }

  &., {
    text-transform: uppercase;
  }

  &., {
    font-style: italic;
  }

  &., {
    margin-bottom: 0;
  }

  &., {
    margin-bottom: 0.5rem;
  }

  &., {
    margin-bottom: 1.5rem;
  }

  &., {
    color: var(--intent-primary);
  }

  &., {
    color: var(--intent-neutral);
  }

  &., {
    color: var(--intent-success);
  }

  &., {
    color: var(--intent-pending);
  }

  &., {
    color: var(--intent-warning);
  }

  &., {
    color: var(--intent-danger);
  }

  &., {
    color: var(--intent-default);
  }
 mock-css.
  font-size: 18px;
  line-height: 24px;
 mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css."
    >
      I am a TextL
    </div>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;

exports[`Typography Base TextSM should match a snapshot 1`] = `
{
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <div
        class="mock-css.
  font-family: var(--font-sans-serif);
  color: var(--color-black);
  font-size: 15px;
  line-height: 24px;
  font-weight: 400;

  &., {
    color: var(--color-grey-500);
  }

  &., {
    color: var(--color-grey-400);

    a {
      color: var(--color-grey-400);
    }
  }

  &., {
    font-weight: var(--font-weight-default);
  }

  &., {
    font-weight: var(--font-weight-medium);
  }

  &., {
    font-weight: var(--font-weight-bold);
  }

  &., {
    text-align: center;
  }

  &., {
    text-transform: capitalize;
  }

  &., {
    text-transform: uppercase;
  }

  &., {
    font-style: italic;
  }

  &., {
    margin-bottom: 0;
  }

  &., {
    margin-bottom: 0.5rem;
  }

  &., {
    margin-bottom: 1.5rem;
  }

  &., {
    color: var(--intent-primary);
  }

  &., {
    color: var(--intent-neutral);
  }

  &., {
    color: var(--intent-success);
  }

  &., {
    color: var(--intent-pending);
  }

  &., {
    color: var(--intent-warning);
  }

  &., {
    color: var(--intent-danger);
  }

  &., {
    color: var(--intent-default);
  }
 mock-css.
  font-size: 14px;
  line-height: 20px;
"
      >
        I am a TextSM
      </div>
    </div>
  </body>,
  "container": <div>
    <div
      class="mock-css.
  font-family: var(--font-sans-serif);
  color: var(--color-black);
  font-size: 15px;
  line-height: 24px;
  font-weight: 400;

  &., {
    color: var(--color-grey-500);
  }

  &., {
    color: var(--color-grey-400);

    a {
      color: var(--color-grey-400);
    }
  }

  &., {
    font-weight: var(--font-weight-default);
  }

  &., {
    font-weight: var(--font-weight-medium);
  }

  &., {
    font-weight: var(--font-weight-bold);
  }

  &., {
    text-align: center;
  }

  &., {
    text-transform: capitalize;
  }

  &., {
    text-transform: uppercase;
  }

  &., {
    font-style: italic;
  }

  &., {
    margin-bottom: 0;
  }

  &., {
    margin-bottom: 0.5rem;
  }

  &., {
    margin-bottom: 1.5rem;
  }

  &., {
    color: var(--intent-primary);
  }

  &., {
    color: var(--intent-neutral);
  }

  &., {
    color: var(--intent-success);
  }

  &., {
    color: var(--intent-pending);
  }

  &., {
    color: var(--intent-warning);
  }

  &., {
    color: var(--intent-danger);
  }

  &., {
    color: var(--intent-default);
  }
 mock-css.
  font-size: 14px;
  line-height: 20px;
"
    >
      I am a TextSM
    </div>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;

exports[`Typography Base TextSM should match a snapshot with all modifiers 1`] = `
{
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <div
        class="mock-css.
  font-family: var(--font-sans-serif);
  color: var(--color-black);
  font-size: 15px;
  line-height: 24px;
  font-weight: 400;

  &., {
    color: var(--color-grey-500);
  }

  &., {
    color: var(--color-grey-400);

    a {
      color: var(--color-grey-400);
    }
  }

  &., {
    font-weight: var(--font-weight-default);
  }

  &., {
    font-weight: var(--font-weight-medium);
  }

  &., {
    font-weight: var(--font-weight-bold);
  }

  &., {
    text-align: center;
  }

  &., {
    text-transform: capitalize;
  }

  &., {
    text-transform: uppercase;
  }

  &., {
    font-style: italic;
  }

  &., {
    margin-bottom: 0;
  }

  &., {
    margin-bottom: 0.5rem;
  }

  &., {
    margin-bottom: 1.5rem;
  }

  &., {
    color: var(--intent-primary);
  }

  &., {
    color: var(--intent-neutral);
  }

  &., {
    color: var(--intent-success);
  }

  &., {
    color: var(--intent-pending);
  }

  &., {
    color: var(--intent-warning);
  }

  &., {
    color: var(--intent-danger);
  }

  &., {
    color: var(--intent-default);
  }
 mock-css.
  font-size: 14px;
  line-height: 20px;
 mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css."
      >
        I am a TextSM
      </div>
    </div>
  </body>,
  "container": <div>
    <div
      class="mock-css.
  font-family: var(--font-sans-serif);
  color: var(--color-black);
  font-size: 15px;
  line-height: 24px;
  font-weight: 400;

  &., {
    color: var(--color-grey-500);
  }

  &., {
    color: var(--color-grey-400);

    a {
      color: var(--color-grey-400);
    }
  }

  &., {
    font-weight: var(--font-weight-default);
  }

  &., {
    font-weight: var(--font-weight-medium);
  }

  &., {
    font-weight: var(--font-weight-bold);
  }

  &., {
    text-align: center;
  }

  &., {
    text-transform: capitalize;
  }

  &., {
    text-transform: uppercase;
  }

  &., {
    font-style: italic;
  }

  &., {
    margin-bottom: 0;
  }

  &., {
    margin-bottom: 0.5rem;
  }

  &., {
    margin-bottom: 1.5rem;
  }

  &., {
    color: var(--intent-primary);
  }

  &., {
    color: var(--intent-neutral);
  }

  &., {
    color: var(--intent-success);
  }

  &., {
    color: var(--intent-pending);
  }

  &., {
    color: var(--intent-warning);
  }

  &., {
    color: var(--intent-danger);
  }

  &., {
    color: var(--intent-default);
  }
 mock-css.
  font-size: 14px;
  line-height: 20px;
 mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css."
    >
      I am a TextSM
    </div>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;

exports[`Typography Base TextXL should match a snapshot 1`] = `
{
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <div
        class="mock-css.
  font-family: var(--font-sans-serif);
  color: var(--color-black);
  font-size: 15px;
  line-height: 24px;
  font-weight: 400;

  &., {
    color: var(--color-grey-500);
  }

  &., {
    color: var(--color-grey-400);

    a {
      color: var(--color-grey-400);
    }
  }

  &., {
    font-weight: var(--font-weight-default);
  }

  &., {
    font-weight: var(--font-weight-medium);
  }

  &., {
    font-weight: var(--font-weight-bold);
  }

  &., {
    text-align: center;
  }

  &., {
    text-transform: capitalize;
  }

  &., {
    text-transform: uppercase;
  }

  &., {
    font-style: italic;
  }

  &., {
    margin-bottom: 0;
  }

  &., {
    margin-bottom: 0.5rem;
  }

  &., {
    margin-bottom: 1.5rem;
  }

  &., {
    color: var(--intent-primary);
  }

  &., {
    color: var(--intent-neutral);
  }

  &., {
    color: var(--intent-success);
  }

  &., {
    color: var(--intent-pending);
  }

  &., {
    color: var(--intent-warning);
  }

  &., {
    color: var(--intent-danger);
  }

  &., {
    color: var(--intent-default);
  }
 mock-css.
  font-size: 20px;
  line-height: 28px;
"
      >
        I am a TextXL
      </div>
    </div>
  </body>,
  "container": <div>
    <div
      class="mock-css.
  font-family: var(--font-sans-serif);
  color: var(--color-black);
  font-size: 15px;
  line-height: 24px;
  font-weight: 400;

  &., {
    color: var(--color-grey-500);
  }

  &., {
    color: var(--color-grey-400);

    a {
      color: var(--color-grey-400);
    }
  }

  &., {
    font-weight: var(--font-weight-default);
  }

  &., {
    font-weight: var(--font-weight-medium);
  }

  &., {
    font-weight: var(--font-weight-bold);
  }

  &., {
    text-align: center;
  }

  &., {
    text-transform: capitalize;
  }

  &., {
    text-transform: uppercase;
  }

  &., {
    font-style: italic;
  }

  &., {
    margin-bottom: 0;
  }

  &., {
    margin-bottom: 0.5rem;
  }

  &., {
    margin-bottom: 1.5rem;
  }

  &., {
    color: var(--intent-primary);
  }

  &., {
    color: var(--intent-neutral);
  }

  &., {
    color: var(--intent-success);
  }

  &., {
    color: var(--intent-pending);
  }

  &., {
    color: var(--intent-warning);
  }

  &., {
    color: var(--intent-danger);
  }

  &., {
    color: var(--intent-default);
  }
 mock-css.
  font-size: 20px;
  line-height: 28px;
"
    >
      I am a TextXL
    </div>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;

exports[`Typography Base TextXL should match a snapshot with all modifiers 1`] = `
{
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <div
        class="mock-css.
  font-family: var(--font-sans-serif);
  color: var(--color-black);
  font-size: 15px;
  line-height: 24px;
  font-weight: 400;

  &., {
    color: var(--color-grey-500);
  }

  &., {
    color: var(--color-grey-400);

    a {
      color: var(--color-grey-400);
    }
  }

  &., {
    font-weight: var(--font-weight-default);
  }

  &., {
    font-weight: var(--font-weight-medium);
  }

  &., {
    font-weight: var(--font-weight-bold);
  }

  &., {
    text-align: center;
  }

  &., {
    text-transform: capitalize;
  }

  &., {
    text-transform: uppercase;
  }

  &., {
    font-style: italic;
  }

  &., {
    margin-bottom: 0;
  }

  &., {
    margin-bottom: 0.5rem;
  }

  &., {
    margin-bottom: 1.5rem;
  }

  &., {
    color: var(--intent-primary);
  }

  &., {
    color: var(--intent-neutral);
  }

  &., {
    color: var(--intent-success);
  }

  &., {
    color: var(--intent-pending);
  }

  &., {
    color: var(--intent-warning);
  }

  &., {
    color: var(--intent-danger);
  }

  &., {
    color: var(--intent-default);
  }
 mock-css.
  font-size: 20px;
  line-height: 28px;
 mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css."
      >
        I am a TextXL
      </div>
    </div>
  </body>,
  "container": <div>
    <div
      class="mock-css.
  font-family: var(--font-sans-serif);
  color: var(--color-black);
  font-size: 15px;
  line-height: 24px;
  font-weight: 400;

  &., {
    color: var(--color-grey-500);
  }

  &., {
    color: var(--color-grey-400);

    a {
      color: var(--color-grey-400);
    }
  }

  &., {
    font-weight: var(--font-weight-default);
  }

  &., {
    font-weight: var(--font-weight-medium);
  }

  &., {
    font-weight: var(--font-weight-bold);
  }

  &., {
    text-align: center;
  }

  &., {
    text-transform: capitalize;
  }

  &., {
    text-transform: uppercase;
  }

  &., {
    font-style: italic;
  }

  &., {
    margin-bottom: 0;
  }

  &., {
    margin-bottom: 0.5rem;
  }

  &., {
    margin-bottom: 1.5rem;
  }

  &., {
    color: var(--intent-primary);
  }

  &., {
    color: var(--intent-neutral);
  }

  &., {
    color: var(--intent-success);
  }

  &., {
    color: var(--intent-pending);
  }

  &., {
    color: var(--intent-warning);
  }

  &., {
    color: var(--intent-danger);
  }

  &., {
    color: var(--intent-default);
  }
 mock-css.
  font-size: 20px;
  line-height: 28px;
 mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css."
    >
      I am a TextXL
    </div>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;

exports[`Typography Base TextXS should match a snapshot 1`] = `
{
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <div
        class="mock-css.
  font-family: var(--font-sans-serif);
  color: var(--color-black);
  font-size: 15px;
  line-height: 24px;
  font-weight: 400;

  &., {
    color: var(--color-grey-500);
  }

  &., {
    color: var(--color-grey-400);

    a {
      color: var(--color-grey-400);
    }
  }

  &., {
    font-weight: var(--font-weight-default);
  }

  &., {
    font-weight: var(--font-weight-medium);
  }

  &., {
    font-weight: var(--font-weight-bold);
  }

  &., {
    text-align: center;
  }

  &., {
    text-transform: capitalize;
  }

  &., {
    text-transform: uppercase;
  }

  &., {
    font-style: italic;
  }

  &., {
    margin-bottom: 0;
  }

  &., {
    margin-bottom: 0.5rem;
  }

  &., {
    margin-bottom: 1.5rem;
  }

  &., {
    color: var(--intent-primary);
  }

  &., {
    color: var(--intent-neutral);
  }

  &., {
    color: var(--intent-success);
  }

  &., {
    color: var(--intent-pending);
  }

  &., {
    color: var(--intent-warning);
  }

  &., {
    color: var(--intent-danger);
  }

  &., {
    color: var(--intent-default);
  }
 mock-css.
  font-size: 13px;
  line-height: 16px;
"
      >
        I am a TextXS
      </div>
    </div>
  </body>,
  "container": <div>
    <div
      class="mock-css.
  font-family: var(--font-sans-serif);
  color: var(--color-black);
  font-size: 15px;
  line-height: 24px;
  font-weight: 400;

  &., {
    color: var(--color-grey-500);
  }

  &., {
    color: var(--color-grey-400);

    a {
      color: var(--color-grey-400);
    }
  }

  &., {
    font-weight: var(--font-weight-default);
  }

  &., {
    font-weight: var(--font-weight-medium);
  }

  &., {
    font-weight: var(--font-weight-bold);
  }

  &., {
    text-align: center;
  }

  &., {
    text-transform: capitalize;
  }

  &., {
    text-transform: uppercase;
  }

  &., {
    font-style: italic;
  }

  &., {
    margin-bottom: 0;
  }

  &., {
    margin-bottom: 0.5rem;
  }

  &., {
    margin-bottom: 1.5rem;
  }

  &., {
    color: var(--intent-primary);
  }

  &., {
    color: var(--intent-neutral);
  }

  &., {
    color: var(--intent-success);
  }

  &., {
    color: var(--intent-pending);
  }

  &., {
    color: var(--intent-warning);
  }

  &., {
    color: var(--intent-danger);
  }

  &., {
    color: var(--intent-default);
  }
 mock-css.
  font-size: 13px;
  line-height: 16px;
"
    >
      I am a TextXS
    </div>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;

exports[`Typography Base TextXS should match a snapshot with all modifiers 1`] = `
{
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <div
        class="mock-css.
  font-family: var(--font-sans-serif);
  color: var(--color-black);
  font-size: 15px;
  line-height: 24px;
  font-weight: 400;

  &., {
    color: var(--color-grey-500);
  }

  &., {
    color: var(--color-grey-400);

    a {
      color: var(--color-grey-400);
    }
  }

  &., {
    font-weight: var(--font-weight-default);
  }

  &., {
    font-weight: var(--font-weight-medium);
  }

  &., {
    font-weight: var(--font-weight-bold);
  }

  &., {
    text-align: center;
  }

  &., {
    text-transform: capitalize;
  }

  &., {
    text-transform: uppercase;
  }

  &., {
    font-style: italic;
  }

  &., {
    margin-bottom: 0;
  }

  &., {
    margin-bottom: 0.5rem;
  }

  &., {
    margin-bottom: 1.5rem;
  }

  &., {
    color: var(--intent-primary);
  }

  &., {
    color: var(--intent-neutral);
  }

  &., {
    color: var(--intent-success);
  }

  &., {
    color: var(--intent-pending);
  }

  &., {
    color: var(--intent-warning);
  }

  &., {
    color: var(--intent-danger);
  }

  &., {
    color: var(--intent-default);
  }
 mock-css.
  font-size: 13px;
  line-height: 16px;
 mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css."
      >
        I am a TextXS
      </div>
    </div>
  </body>,
  "container": <div>
    <div
      class="mock-css.
  font-family: var(--font-sans-serif);
  color: var(--color-black);
  font-size: 15px;
  line-height: 24px;
  font-weight: 400;

  &., {
    color: var(--color-grey-500);
  }

  &., {
    color: var(--color-grey-400);

    a {
      color: var(--color-grey-400);
    }
  }

  &., {
    font-weight: var(--font-weight-default);
  }

  &., {
    font-weight: var(--font-weight-medium);
  }

  &., {
    font-weight: var(--font-weight-bold);
  }

  &., {
    text-align: center;
  }

  &., {
    text-transform: capitalize;
  }

  &., {
    text-transform: uppercase;
  }

  &., {
    font-style: italic;
  }

  &., {
    margin-bottom: 0;
  }

  &., {
    margin-bottom: 0.5rem;
  }

  &., {
    margin-bottom: 1.5rem;
  }

  &., {
    color: var(--intent-primary);
  }

  &., {
    color: var(--intent-neutral);
  }

  &., {
    color: var(--intent-success);
  }

  &., {
    color: var(--intent-pending);
  }

  &., {
    color: var(--intent-warning);
  }

  &., {
    color: var(--intent-danger);
  }

  &., {
    color: var(--intent-default);
  }
 mock-css.
  font-size: 13px;
  line-height: 16px;
 mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css."
    >
      I am a TextXS
    </div>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;

exports[`Typography Helpers BodyText should match a snapshot 1`] = `
{
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <mock-styled.p
        classname="mock-css.
  font-family: var(--font-sans-serif);
  color: var(--color-black);
  font-size: 15px;
  line-height: 24px;
  font-weight: 400;

  &., {
    color: var(--color-grey-500);
  }

  &., {
    color: var(--color-grey-400);

    a {
      color: var(--color-grey-400);
    }
  }

  &., {
    font-weight: var(--font-weight-default);
  }

  &., {
    font-weight: var(--font-weight-medium);
  }

  &., {
    font-weight: var(--font-weight-bold);
  }

  &., {
    text-align: center;
  }

  &., {
    text-transform: capitalize;
  }

  &., {
    text-transform: uppercase;
  }

  &., {
    font-style: italic;
  }

  &., {
    margin-bottom: 0;
  }

  &., {
    margin-bottom: 0.5rem;
  }

  &., {
    margin-bottom: 1.5rem;
  }

  &., {
    color: var(--intent-primary);
  }

  &., {
    color: var(--intent-neutral);
  }

  &., {
    color: var(--intent-success);
  }

  &., {
    color: var(--intent-pending);
  }

  &., {
    color: var(--intent-warning);
  }

  &., {
    color: var(--intent-danger);
  }

  &., {
    color: var(--intent-default);
  }
"
      >
        I am body text
      </mock-styled.p>
    </div>
  </body>,
  "container": <div>
    <mock-styled.p
      classname="mock-css.
  font-family: var(--font-sans-serif);
  color: var(--color-black);
  font-size: 15px;
  line-height: 24px;
  font-weight: 400;

  &., {
    color: var(--color-grey-500);
  }

  &., {
    color: var(--color-grey-400);

    a {
      color: var(--color-grey-400);
    }
  }

  &., {
    font-weight: var(--font-weight-default);
  }

  &., {
    font-weight: var(--font-weight-medium);
  }

  &., {
    font-weight: var(--font-weight-bold);
  }

  &., {
    text-align: center;
  }

  &., {
    text-transform: capitalize;
  }

  &., {
    text-transform: uppercase;
  }

  &., {
    font-style: italic;
  }

  &., {
    margin-bottom: 0;
  }

  &., {
    margin-bottom: 0.5rem;
  }

  &., {
    margin-bottom: 1.5rem;
  }

  &., {
    color: var(--intent-primary);
  }

  &., {
    color: var(--intent-neutral);
  }

  &., {
    color: var(--intent-success);
  }

  &., {
    color: var(--intent-pending);
  }

  &., {
    color: var(--intent-warning);
  }

  &., {
    color: var(--intent-danger);
  }

  &., {
    color: var(--intent-default);
  }
"
    >
      I am body text
    </mock-styled.p>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;

exports[`Typography Helpers BodyText should match a snapshot with all modifiers 1`] = `
{
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <mock-styled.p
        classname="mock-css.
  font-family: var(--font-sans-serif);
  color: var(--color-black);
  font-size: 15px;
  line-height: 24px;
  font-weight: 400;

  &., {
    color: var(--color-grey-500);
  }

  &., {
    color: var(--color-grey-400);

    a {
      color: var(--color-grey-400);
    }
  }

  &., {
    font-weight: var(--font-weight-default);
  }

  &., {
    font-weight: var(--font-weight-medium);
  }

  &., {
    font-weight: var(--font-weight-bold);
  }

  &., {
    text-align: center;
  }

  &., {
    text-transform: capitalize;
  }

  &., {
    text-transform: uppercase;
  }

  &., {
    font-style: italic;
  }

  &., {
    margin-bottom: 0;
  }

  &., {
    margin-bottom: 0.5rem;
  }

  &., {
    margin-bottom: 1.5rem;
  }

  &., {
    color: var(--intent-primary);
  }

  &., {
    color: var(--intent-neutral);
  }

  &., {
    color: var(--intent-success);
  }

  &., {
    color: var(--intent-pending);
  }

  &., {
    color: var(--intent-warning);
  }

  &., {
    color: var(--intent-danger);
  }

  &., {
    color: var(--intent-default);
  }
 mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css."
      >
        I am body text
      </mock-styled.p>
    </div>
  </body>,
  "container": <div>
    <mock-styled.p
      classname="mock-css.
  font-family: var(--font-sans-serif);
  color: var(--color-black);
  font-size: 15px;
  line-height: 24px;
  font-weight: 400;

  &., {
    color: var(--color-grey-500);
  }

  &., {
    color: var(--color-grey-400);

    a {
      color: var(--color-grey-400);
    }
  }

  &., {
    font-weight: var(--font-weight-default);
  }

  &., {
    font-weight: var(--font-weight-medium);
  }

  &., {
    font-weight: var(--font-weight-bold);
  }

  &., {
    text-align: center;
  }

  &., {
    text-transform: capitalize;
  }

  &., {
    text-transform: uppercase;
  }

  &., {
    font-style: italic;
  }

  &., {
    margin-bottom: 0;
  }

  &., {
    margin-bottom: 0.5rem;
  }

  &., {
    margin-bottom: 1.5rem;
  }

  &., {
    color: var(--intent-primary);
  }

  &., {
    color: var(--intent-neutral);
  }

  &., {
    color: var(--intent-success);
  }

  &., {
    color: var(--intent-pending);
  }

  &., {
    color: var(--intent-warning);
  }

  &., {
    color: var(--intent-danger);
  }

  &., {
    color: var(--intent-default);
  }
 mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css."
    >
      I am body text
    </mock-styled.p>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;

exports[`Typography Helpers SmallText should match a snapshot 1`] = `
{
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <mock-styled.p
        classname="mock-css.
  font-family: var(--font-sans-serif);
  color: var(--color-black);
  font-size: 15px;
  line-height: 24px;
  font-weight: 400;

  &., {
    color: var(--color-grey-500);
  }

  &., {
    color: var(--color-grey-400);

    a {
      color: var(--color-grey-400);
    }
  }

  &., {
    font-weight: var(--font-weight-default);
  }

  &., {
    font-weight: var(--font-weight-medium);
  }

  &., {
    font-weight: var(--font-weight-bold);
  }

  &., {
    text-align: center;
  }

  &., {
    text-transform: capitalize;
  }

  &., {
    text-transform: uppercase;
  }

  &., {
    font-style: italic;
  }

  &., {
    margin-bottom: 0;
  }

  &., {
    margin-bottom: 0.5rem;
  }

  &., {
    margin-bottom: 1.5rem;
  }

  &., {
    color: var(--intent-primary);
  }

  &., {
    color: var(--intent-neutral);
  }

  &., {
    color: var(--intent-success);
  }

  &., {
    color: var(--intent-pending);
  }

  &., {
    color: var(--intent-warning);
  }

  &., {
    color: var(--intent-danger);
  }

  &., {
    color: var(--intent-default);
  }
"
      >
        I am small text
      </mock-styled.p>
    </div>
  </body>,
  "container": <div>
    <mock-styled.p
      classname="mock-css.
  font-family: var(--font-sans-serif);
  color: var(--color-black);
  font-size: 15px;
  line-height: 24px;
  font-weight: 400;

  &., {
    color: var(--color-grey-500);
  }

  &., {
    color: var(--color-grey-400);

    a {
      color: var(--color-grey-400);
    }
  }

  &., {
    font-weight: var(--font-weight-default);
  }

  &., {
    font-weight: var(--font-weight-medium);
  }

  &., {
    font-weight: var(--font-weight-bold);
  }

  &., {
    text-align: center;
  }

  &., {
    text-transform: capitalize;
  }

  &., {
    text-transform: uppercase;
  }

  &., {
    font-style: italic;
  }

  &., {
    margin-bottom: 0;
  }

  &., {
    margin-bottom: 0.5rem;
  }

  &., {
    margin-bottom: 1.5rem;
  }

  &., {
    color: var(--intent-primary);
  }

  &., {
    color: var(--intent-neutral);
  }

  &., {
    color: var(--intent-success);
  }

  &., {
    color: var(--intent-pending);
  }

  &., {
    color: var(--intent-warning);
  }

  &., {
    color: var(--intent-danger);
  }

  &., {
    color: var(--intent-default);
  }
"
    >
      I am small text
    </mock-styled.p>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;

exports[`Typography Helpers SmallText should match a snapshot 2`] = `
{
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <mock-styled.p
        classname="mock-css.
  font-family: var(--font-sans-serif);
  color: var(--color-black);
  font-size: 15px;
  line-height: 24px;
  font-weight: 400;

  &., {
    color: var(--color-grey-500);
  }

  &., {
    color: var(--color-grey-400);

    a {
      color: var(--color-grey-400);
    }
  }

  &., {
    font-weight: var(--font-weight-default);
  }

  &., {
    font-weight: var(--font-weight-medium);
  }

  &., {
    font-weight: var(--font-weight-bold);
  }

  &., {
    text-align: center;
  }

  &., {
    text-transform: capitalize;
  }

  &., {
    text-transform: uppercase;
  }

  &., {
    font-style: italic;
  }

  &., {
    margin-bottom: 0;
  }

  &., {
    margin-bottom: 0.5rem;
  }

  &., {
    margin-bottom: 1.5rem;
  }

  &., {
    color: var(--intent-primary);
  }

  &., {
    color: var(--intent-neutral);
  }

  &., {
    color: var(--intent-success);
  }

  &., {
    color: var(--intent-pending);
  }

  &., {
    color: var(--intent-warning);
  }

  &., {
    color: var(--intent-danger);
  }

  &., {
    color: var(--intent-default);
  }
"
      >
        I am small text
      </mock-styled.p>
    </div>
  </body>,
  "container": <div>
    <mock-styled.p
      classname="mock-css.
  font-family: var(--font-sans-serif);
  color: var(--color-black);
  font-size: 15px;
  line-height: 24px;
  font-weight: 400;

  &., {
    color: var(--color-grey-500);
  }

  &., {
    color: var(--color-grey-400);

    a {
      color: var(--color-grey-400);
    }
  }

  &., {
    font-weight: var(--font-weight-default);
  }

  &., {
    font-weight: var(--font-weight-medium);
  }

  &., {
    font-weight: var(--font-weight-bold);
  }

  &., {
    text-align: center;
  }

  &., {
    text-transform: capitalize;
  }

  &., {
    text-transform: uppercase;
  }

  &., {
    font-style: italic;
  }

  &., {
    margin-bottom: 0;
  }

  &., {
    margin-bottom: 0.5rem;
  }

  &., {
    margin-bottom: 1.5rem;
  }

  &., {
    color: var(--intent-primary);
  }

  &., {
    color: var(--intent-neutral);
  }

  &., {
    color: var(--intent-success);
  }

  &., {
    color: var(--intent-pending);
  }

  &., {
    color: var(--intent-warning);
  }

  &., {
    color: var(--intent-danger);
  }

  &., {
    color: var(--intent-default);
  }
"
    >
      I am small text
    </mock-styled.p>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;

exports[`Typography Helpers SmallText should match a snapshot with all modifiers 1`] = `
{
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <mock-styled.p
        classname="mock-css.
  font-family: var(--font-sans-serif);
  color: var(--color-black);
  font-size: 15px;
  line-height: 24px;
  font-weight: 400;

  &., {
    color: var(--color-grey-500);
  }

  &., {
    color: var(--color-grey-400);

    a {
      color: var(--color-grey-400);
    }
  }

  &., {
    font-weight: var(--font-weight-default);
  }

  &., {
    font-weight: var(--font-weight-medium);
  }

  &., {
    font-weight: var(--font-weight-bold);
  }

  &., {
    text-align: center;
  }

  &., {
    text-transform: capitalize;
  }

  &., {
    text-transform: uppercase;
  }

  &., {
    font-style: italic;
  }

  &., {
    margin-bottom: 0;
  }

  &., {
    margin-bottom: 0.5rem;
  }

  &., {
    margin-bottom: 1.5rem;
  }

  &., {
    color: var(--intent-primary);
  }

  &., {
    color: var(--intent-neutral);
  }

  &., {
    color: var(--intent-success);
  }

  &., {
    color: var(--intent-pending);
  }

  &., {
    color: var(--intent-warning);
  }

  &., {
    color: var(--intent-danger);
  }

  &., {
    color: var(--intent-default);
  }
 mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css."
      >
        I am small text
      </mock-styled.p>
    </div>
  </body>,
  "container": <div>
    <mock-styled.p
      classname="mock-css.
  font-family: var(--font-sans-serif);
  color: var(--color-black);
  font-size: 15px;
  line-height: 24px;
  font-weight: 400;

  &., {
    color: var(--color-grey-500);
  }

  &., {
    color: var(--color-grey-400);

    a {
      color: var(--color-grey-400);
    }
  }

  &., {
    font-weight: var(--font-weight-default);
  }

  &., {
    font-weight: var(--font-weight-medium);
  }

  &., {
    font-weight: var(--font-weight-bold);
  }

  &., {
    text-align: center;
  }

  &., {
    text-transform: capitalize;
  }

  &., {
    text-transform: uppercase;
  }

  &., {
    font-style: italic;
  }

  &., {
    margin-bottom: 0;
  }

  &., {
    margin-bottom: 0.5rem;
  }

  &., {
    margin-bottom: 1.5rem;
  }

  &., {
    color: var(--intent-primary);
  }

  &., {
    color: var(--intent-neutral);
  }

  &., {
    color: var(--intent-success);
  }

  &., {
    color: var(--intent-pending);
  }

  &., {
    color: var(--intent-warning);
  }

  &., {
    color: var(--intent-danger);
  }

  &., {
    color: var(--intent-default);
  }
 mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css."
    >
      I am small text
    </mock-styled.p>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;

exports[`Typography Helpers SmallText should match a snapshot with all modifiers 2`] = `
{
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <mock-styled.p
        classname="mock-css.
  font-family: var(--font-sans-serif);
  color: var(--color-black);
  font-size: 15px;
  line-height: 24px;
  font-weight: 400;

  &., {
    color: var(--color-grey-500);
  }

  &., {
    color: var(--color-grey-400);

    a {
      color: var(--color-grey-400);
    }
  }

  &., {
    font-weight: var(--font-weight-default);
  }

  &., {
    font-weight: var(--font-weight-medium);
  }

  &., {
    font-weight: var(--font-weight-bold);
  }

  &., {
    text-align: center;
  }

  &., {
    text-transform: capitalize;
  }

  &., {
    text-transform: uppercase;
  }

  &., {
    font-style: italic;
  }

  &., {
    margin-bottom: 0;
  }

  &., {
    margin-bottom: 0.5rem;
  }

  &., {
    margin-bottom: 1.5rem;
  }

  &., {
    color: var(--intent-primary);
  }

  &., {
    color: var(--intent-neutral);
  }

  &., {
    color: var(--intent-success);
  }

  &., {
    color: var(--intent-pending);
  }

  &., {
    color: var(--intent-warning);
  }

  &., {
    color: var(--intent-danger);
  }

  &., {
    color: var(--intent-default);
  }
 mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css."
      >
        I am small text
      </mock-styled.p>
    </div>
  </body>,
  "container": <div>
    <mock-styled.p
      classname="mock-css.
  font-family: var(--font-sans-serif);
  color: var(--color-black);
  font-size: 15px;
  line-height: 24px;
  font-weight: 400;

  &., {
    color: var(--color-grey-500);
  }

  &., {
    color: var(--color-grey-400);

    a {
      color: var(--color-grey-400);
    }
  }

  &., {
    font-weight: var(--font-weight-default);
  }

  &., {
    font-weight: var(--font-weight-medium);
  }

  &., {
    font-weight: var(--font-weight-bold);
  }

  &., {
    text-align: center;
  }

  &., {
    text-transform: capitalize;
  }

  &., {
    text-transform: uppercase;
  }

  &., {
    font-style: italic;
  }

  &., {
    margin-bottom: 0;
  }

  &., {
    margin-bottom: 0.5rem;
  }

  &., {
    margin-bottom: 1.5rem;
  }

  &., {
    color: var(--intent-primary);
  }

  &., {
    color: var(--intent-neutral);
  }

  &., {
    color: var(--intent-success);
  }

  &., {
    color: var(--intent-pending);
  }

  &., {
    color: var(--intent-warning);
  }

  &., {
    color: var(--intent-danger);
  }

  &., {
    color: var(--intent-default);
  }
 mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css."
    >
      I am small text
    </mock-styled.p>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;

exports[`Typography Helpers SmallText should match a snapshot with all modifiers 3`] = `
{
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <mock-styled.p
        classname="mock-css.
  font-family: var(--font-sans-serif);
  color: var(--color-black);
  font-size: 15px;
  line-height: 24px;
  font-weight: 400;

  &., {
    color: var(--color-grey-500);
  }

  &., {
    color: var(--color-grey-400);

    a {
      color: var(--color-grey-400);
    }
  }

  &., {
    font-weight: var(--font-weight-default);
  }

  &., {
    font-weight: var(--font-weight-medium);
  }

  &., {
    font-weight: var(--font-weight-bold);
  }

  &., {
    text-align: center;
  }

  &., {
    text-transform: capitalize;
  }

  &., {
    text-transform: uppercase;
  }

  &., {
    font-style: italic;
  }

  &., {
    margin-bottom: 0;
  }

  &., {
    margin-bottom: 0.5rem;
  }

  &., {
    margin-bottom: 1.5rem;
  }

  &., {
    color: var(--intent-primary);
  }

  &., {
    color: var(--intent-neutral);
  }

  &., {
    color: var(--intent-success);
  }

  &., {
    color: var(--intent-pending);
  }

  &., {
    color: var(--intent-warning);
  }

  &., {
    color: var(--intent-danger);
  }

  &., {
    color: var(--intent-default);
  }
 mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css."
      >
        i am some text
      </mock-styled.p>
    </div>
  </body>,
  "container": <div>
    <mock-styled.p
      classname="mock-css.
  font-family: var(--font-sans-serif);
  color: var(--color-black);
  font-size: 15px;
  line-height: 24px;
  font-weight: 400;

  &., {
    color: var(--color-grey-500);
  }

  &., {
    color: var(--color-grey-400);

    a {
      color: var(--color-grey-400);
    }
  }

  &., {
    font-weight: var(--font-weight-default);
  }

  &., {
    font-weight: var(--font-weight-medium);
  }

  &., {
    font-weight: var(--font-weight-bold);
  }

  &., {
    text-align: center;
  }

  &., {
    text-transform: capitalize;
  }

  &., {
    text-transform: uppercase;
  }

  &., {
    font-style: italic;
  }

  &., {
    margin-bottom: 0;
  }

  &., {
    margin-bottom: 0.5rem;
  }

  &., {
    margin-bottom: 1.5rem;
  }

  &., {
    color: var(--intent-primary);
  }

  &., {
    color: var(--intent-neutral);
  }

  &., {
    color: var(--intent-success);
  }

  &., {
    color: var(--intent-pending);
  }

  &., {
    color: var(--intent-warning);
  }

  &., {
    color: var(--intent-danger);
  }

  &., {
    color: var(--intent-default);
  }
 mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css."
    >
      i am some text
    </mock-styled.p>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;

exports[`Typography Helpers SubTitle should match a snapshot 1`] = `
{
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <mock-styled.h2
        classname="mock-css.
  font-family: var(--font-sans-serif);
  color: var(--color-black);
  font-size: 15px;
  line-height: 24px;
  font-weight: 400;

  &., {
    color: var(--color-grey-500);
  }

  &., {
    color: var(--color-grey-400);

    a {
      color: var(--color-grey-400);
    }
  }

  &., {
    font-weight: var(--font-weight-default);
  }

  &., {
    font-weight: var(--font-weight-medium);
  }

  &., {
    font-weight: var(--font-weight-bold);
  }

  &., {
    text-align: center;
  }

  &., {
    text-transform: capitalize;
  }

  &., {
    text-transform: uppercase;
  }

  &., {
    font-style: italic;
  }

  &., {
    margin-bottom: 0;
  }

  &., {
    margin-bottom: 0.5rem;
  }

  &., {
    margin-bottom: 1.5rem;
  }

  &., {
    color: var(--intent-primary);
  }

  &., {
    color: var(--intent-neutral);
  }

  &., {
    color: var(--intent-success);
  }

  &., {
    color: var(--intent-pending);
  }

  &., {
    color: var(--intent-warning);
  }

  &., {
    color: var(--intent-danger);
  }

  &., {
    color: var(--intent-default);
  }
"
      >
        I am a subtitle
      </mock-styled.h2>
    </div>
  </body>,
  "container": <div>
    <mock-styled.h2
      classname="mock-css.
  font-family: var(--font-sans-serif);
  color: var(--color-black);
  font-size: 15px;
  line-height: 24px;
  font-weight: 400;

  &., {
    color: var(--color-grey-500);
  }

  &., {
    color: var(--color-grey-400);

    a {
      color: var(--color-grey-400);
    }
  }

  &., {
    font-weight: var(--font-weight-default);
  }

  &., {
    font-weight: var(--font-weight-medium);
  }

  &., {
    font-weight: var(--font-weight-bold);
  }

  &., {
    text-align: center;
  }

  &., {
    text-transform: capitalize;
  }

  &., {
    text-transform: uppercase;
  }

  &., {
    font-style: italic;
  }

  &., {
    margin-bottom: 0;
  }

  &., {
    margin-bottom: 0.5rem;
  }

  &., {
    margin-bottom: 1.5rem;
  }

  &., {
    color: var(--intent-primary);
  }

  &., {
    color: var(--intent-neutral);
  }

  &., {
    color: var(--intent-success);
  }

  &., {
    color: var(--intent-pending);
  }

  &., {
    color: var(--intent-warning);
  }

  &., {
    color: var(--intent-danger);
  }

  &., {
    color: var(--intent-default);
  }
"
    >
      I am a subtitle
    </mock-styled.h2>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;

exports[`Typography Helpers SubTitle should match a snapshot with all modifiers 1`] = `
{
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <mock-styled.h2
        classname="mock-css.
  font-family: var(--font-sans-serif);
  color: var(--color-black);
  font-size: 15px;
  line-height: 24px;
  font-weight: 400;

  &., {
    color: var(--color-grey-500);
  }

  &., {
    color: var(--color-grey-400);

    a {
      color: var(--color-grey-400);
    }
  }

  &., {
    font-weight: var(--font-weight-default);
  }

  &., {
    font-weight: var(--font-weight-medium);
  }

  &., {
    font-weight: var(--font-weight-bold);
  }

  &., {
    text-align: center;
  }

  &., {
    text-transform: capitalize;
  }

  &., {
    text-transform: uppercase;
  }

  &., {
    font-style: italic;
  }

  &., {
    margin-bottom: 0;
  }

  &., {
    margin-bottom: 0.5rem;
  }

  &., {
    margin-bottom: 1.5rem;
  }

  &., {
    color: var(--intent-primary);
  }

  &., {
    color: var(--intent-neutral);
  }

  &., {
    color: var(--intent-success);
  }

  &., {
    color: var(--intent-pending);
  }

  &., {
    color: var(--intent-warning);
  }

  &., {
    color: var(--intent-danger);
  }

  &., {
    color: var(--intent-default);
  }
 mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css."
      >
        I am a subtitle
      </mock-styled.h2>
    </div>
  </body>,
  "container": <div>
    <mock-styled.h2
      classname="mock-css.
  font-family: var(--font-sans-serif);
  color: var(--color-black);
  font-size: 15px;
  line-height: 24px;
  font-weight: 400;

  &., {
    color: var(--color-grey-500);
  }

  &., {
    color: var(--color-grey-400);

    a {
      color: var(--color-grey-400);
    }
  }

  &., {
    font-weight: var(--font-weight-default);
  }

  &., {
    font-weight: var(--font-weight-medium);
  }

  &., {
    font-weight: var(--font-weight-bold);
  }

  &., {
    text-align: center;
  }

  &., {
    text-transform: capitalize;
  }

  &., {
    text-transform: uppercase;
  }

  &., {
    font-style: italic;
  }

  &., {
    margin-bottom: 0;
  }

  &., {
    margin-bottom: 0.5rem;
  }

  &., {
    margin-bottom: 1.5rem;
  }

  &., {
    color: var(--intent-primary);
  }

  &., {
    color: var(--intent-neutral);
  }

  &., {
    color: var(--intent-success);
  }

  &., {
    color: var(--intent-pending);
  }

  &., {
    color: var(--intent-warning);
  }

  &., {
    color: var(--intent-danger);
  }

  &., {
    color: var(--intent-default);
  }
 mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css."
    >
      I am a subtitle
    </mock-styled.h2>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;

exports[`Typography Helpers Title should match a snapshot 1`] = `
{
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <mock-styled.h1
        classname="mock-css.
  font-family: var(--font-sans-serif);
  color: var(--color-black);
  font-size: 15px;
  line-height: 24px;
  font-weight: 400;

  &., {
    color: var(--color-grey-500);
  }

  &., {
    color: var(--color-grey-400);

    a {
      color: var(--color-grey-400);
    }
  }

  &., {
    font-weight: var(--font-weight-default);
  }

  &., {
    font-weight: var(--font-weight-medium);
  }

  &., {
    font-weight: var(--font-weight-bold);
  }

  &., {
    text-align: center;
  }

  &., {
    text-transform: capitalize;
  }

  &., {
    text-transform: uppercase;
  }

  &., {
    font-style: italic;
  }

  &., {
    margin-bottom: 0;
  }

  &., {
    margin-bottom: 0.5rem;
  }

  &., {
    margin-bottom: 1.5rem;
  }

  &., {
    color: var(--intent-primary);
  }

  &., {
    color: var(--intent-neutral);
  }

  &., {
    color: var(--intent-success);
  }

  &., {
    color: var(--intent-pending);
  }

  &., {
    color: var(--intent-warning);
  }

  &., {
    color: var(--intent-danger);
  }

  &., {
    color: var(--intent-default);
  }
"
      >
        I am a title
      </mock-styled.h1>
    </div>
  </body>,
  "container": <div>
    <mock-styled.h1
      classname="mock-css.
  font-family: var(--font-sans-serif);
  color: var(--color-black);
  font-size: 15px;
  line-height: 24px;
  font-weight: 400;

  &., {
    color: var(--color-grey-500);
  }

  &., {
    color: var(--color-grey-400);

    a {
      color: var(--color-grey-400);
    }
  }

  &., {
    font-weight: var(--font-weight-default);
  }

  &., {
    font-weight: var(--font-weight-medium);
  }

  &., {
    font-weight: var(--font-weight-bold);
  }

  &., {
    text-align: center;
  }

  &., {
    text-transform: capitalize;
  }

  &., {
    text-transform: uppercase;
  }

  &., {
    font-style: italic;
  }

  &., {
    margin-bottom: 0;
  }

  &., {
    margin-bottom: 0.5rem;
  }

  &., {
    margin-bottom: 1.5rem;
  }

  &., {
    color: var(--intent-primary);
  }

  &., {
    color: var(--intent-neutral);
  }

  &., {
    color: var(--intent-success);
  }

  &., {
    color: var(--intent-pending);
  }

  &., {
    color: var(--intent-warning);
  }

  &., {
    color: var(--intent-danger);
  }

  &., {
    color: var(--intent-default);
  }
"
    >
      I am a title
    </mock-styled.h1>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;

exports[`Typography Helpers Title should match a snapshot with all modifiers 1`] = `
{
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <mock-styled.h1
        classname="mock-css.
  font-family: var(--font-sans-serif);
  color: var(--color-black);
  font-size: 15px;
  line-height: 24px;
  font-weight: 400;

  &., {
    color: var(--color-grey-500);
  }

  &., {
    color: var(--color-grey-400);

    a {
      color: var(--color-grey-400);
    }
  }

  &., {
    font-weight: var(--font-weight-default);
  }

  &., {
    font-weight: var(--font-weight-medium);
  }

  &., {
    font-weight: var(--font-weight-bold);
  }

  &., {
    text-align: center;
  }

  &., {
    text-transform: capitalize;
  }

  &., {
    text-transform: uppercase;
  }

  &., {
    font-style: italic;
  }

  &., {
    margin-bottom: 0;
  }

  &., {
    margin-bottom: 0.5rem;
  }

  &., {
    margin-bottom: 1.5rem;
  }

  &., {
    color: var(--intent-primary);
  }

  &., {
    color: var(--intent-neutral);
  }

  &., {
    color: var(--intent-success);
  }

  &., {
    color: var(--intent-pending);
  }

  &., {
    color: var(--intent-warning);
  }

  &., {
    color: var(--intent-danger);
  }

  &., {
    color: var(--intent-default);
  }
 mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css."
      >
        I am a title
      </mock-styled.h1>
    </div>
  </body>,
  "container": <div>
    <mock-styled.h1
      classname="mock-css.
  font-family: var(--font-sans-serif);
  color: var(--color-black);
  font-size: 15px;
  line-height: 24px;
  font-weight: 400;

  &., {
    color: var(--color-grey-500);
  }

  &., {
    color: var(--color-grey-400);

    a {
      color: var(--color-grey-400);
    }
  }

  &., {
    font-weight: var(--font-weight-default);
  }

  &., {
    font-weight: var(--font-weight-medium);
  }

  &., {
    font-weight: var(--font-weight-bold);
  }

  &., {
    text-align: center;
  }

  &., {
    text-transform: capitalize;
  }

  &., {
    text-transform: uppercase;
  }

  &., {
    font-style: italic;
  }

  &., {
    margin-bottom: 0;
  }

  &., {
    margin-bottom: 0.5rem;
  }

  &., {
    margin-bottom: 1.5rem;
  }

  &., {
    color: var(--intent-primary);
  }

  &., {
    color: var(--intent-neutral);
  }

  &., {
    color: var(--intent-success);
  }

  &., {
    color: var(--intent-pending);
  }

  &., {
    color: var(--intent-warning);
  }

  &., {
    color: var(--intent-danger);
  }

  &., {
    color: var(--intent-default);
  }
 mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css. mock-css."
    >
      I am a title
    </mock-styled.h1>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;
