// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`MultiSelect should match a snapshot and render children 1`] = `
{
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <mock-styled.div
        classname=""
      >
        <span>
          Some Value
        </span>
      </mock-styled.div>
    </div>
  </body>,
  "container": <div>
    <mock-styled.div
      classname=""
    >
      <span>
        Some Value
      </span>
    </mock-styled.div>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;

exports[`MultiSelectChip should match a snapshot and render children 1`] = `
{
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <mock-styled.input
        aria-hidden="true"
        id="test-id"
        type="checkbox"
      />
      <mock-styled.label
        classname=""
        htmlfor="test-id"
        role="option"
      >
        <span>
          Some Value
        </span>
      </mock-styled.label>
    </div>
  </body>,
  "container": <div>
    <mock-styled.input
      aria-hidden="true"
      id="test-id"
      type="checkbox"
    />
    <mock-styled.label
      classname=""
      htmlfor="test-id"
      role="option"
    >
      <span>
        Some Value
      </span>
    </mock-styled.label>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;

exports[`MultiSelectInput should match a snapshot and render children 1`] = `
{
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <mock-styled.div>
        <mock-styled.input
          id="react-example"
        />
        <mock-styled.div
          aria-label="Multi selected options"
          classname=""
          role="listbox"
        >
          <mock-styled.input
            aria-checked="true"
            aria-hidden="true"
            id="multi-select-chip-item-one"
            role="option"
            type="checkbox"
          />
          <mock-styled.label
            classname=""
            htmlfor="multi-select-chip-item-one"
            role="option"
            tabindex="0"
          >
            Item one
          </mock-styled.label>
        </mock-styled.div>
        <mock-styled.div
          aria-label="Multi unselected options"
          classname=""
          role="listbox"
        >
          <mock-styled.input
            aria-checked="false"
            aria-hidden="true"
            id="test-static-id"
            role="option"
            type="checkbox"
          />
          <mock-styled.label
            classname="mock-css."
            htmlfor="test-static-id"
            role="option"
            tabindex="0"
          >
            Item two
          </mock-styled.label>
          <mock-styled.input
            aria-checked="false"
            aria-hidden="true"
            id="test-static-id"
            role="option"
            type="checkbox"
          />
          <mock-styled.label
            classname="mock-css."
            htmlfor="test-static-id"
            role="option"
            tabindex="0"
          >
            Item three
          </mock-styled.label>
        </mock-styled.div>
      </mock-styled.div>
    </div>
  </body>,
  "container": <div>
    <mock-styled.div>
      <mock-styled.input
        id="react-example"
      />
      <mock-styled.div
        aria-label="Multi selected options"
        classname=""
        role="listbox"
      >
        <mock-styled.input
          aria-checked="true"
          aria-hidden="true"
          id="multi-select-chip-item-one"
          role="option"
          type="checkbox"
        />
        <mock-styled.label
          classname=""
          htmlfor="multi-select-chip-item-one"
          role="option"
          tabindex="0"
        >
          Item one
        </mock-styled.label>
      </mock-styled.div>
      <mock-styled.div
        aria-label="Multi unselected options"
        classname=""
        role="listbox"
      >
        <mock-styled.input
          aria-checked="false"
          aria-hidden="true"
          id="test-static-id"
          role="option"
          type="checkbox"
        />
        <mock-styled.label
          classname="mock-css."
          htmlfor="test-static-id"
          role="option"
          tabindex="0"
        >
          Item two
        </mock-styled.label>
        <mock-styled.input
          aria-checked="false"
          aria-hidden="true"
          id="test-static-id"
          role="option"
          type="checkbox"
        />
        <mock-styled.label
          classname="mock-css."
          htmlfor="test-static-id"
          role="option"
          tabindex="0"
        >
          Item three
        </mock-styled.label>
      </mock-styled.div>
    </mock-styled.div>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;

exports[`MultiSelectInput should match a snapshot and render non selected message where there are no selected items 1`] = `
{
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <mock-styled.div>
        <mock-styled.input
          id="react-example"
        />
        <mock-styled.div
          aria-label="Multi selected options"
          classname=""
          role="listbox"
        >
          <mock-styled.span
            classname="mock-css.
  margin-left: var(--util-rems-2);
 mock-css."
          >
            <svg
              role="img"
              title="Icon image with name task"
            />
          </mock-styled.span>
          <p>
            No items selected
          </p>
        </mock-styled.div>
        <mock-styled.div
          aria-label="Multi unselected options"
          classname=""
          role="listbox"
        >
          <mock-styled.input
            aria-checked="false"
            aria-hidden="true"
            id="test-static-id"
            role="option"
            type="checkbox"
          />
          <mock-styled.label
            classname="mock-css."
            htmlfor="test-static-id"
            role="option"
            tabindex="0"
          >
            Item one
          </mock-styled.label>
          <mock-styled.input
            aria-checked="false"
            aria-hidden="true"
            id="test-static-id"
            role="option"
            type="checkbox"
          />
          <mock-styled.label
            classname="mock-css."
            htmlfor="test-static-id"
            role="option"
            tabindex="0"
          >
            Item two
          </mock-styled.label>
          <mock-styled.input
            aria-checked="false"
            aria-hidden="true"
            id="test-static-id"
            role="option"
            type="checkbox"
          />
          <mock-styled.label
            classname="mock-css."
            htmlfor="test-static-id"
            role="option"
            tabindex="0"
          >
            Item three
          </mock-styled.label>
        </mock-styled.div>
      </mock-styled.div>
    </div>
  </body>,
  "container": <div>
    <mock-styled.div>
      <mock-styled.input
        id="react-example"
      />
      <mock-styled.div
        aria-label="Multi selected options"
        classname=""
        role="listbox"
      >
        <mock-styled.span
          classname="mock-css.
  margin-left: var(--util-rems-2);
 mock-css."
        >
          <svg
            role="img"
            title="Icon image with name task"
          />
        </mock-styled.span>
        <p>
          No items selected
        </p>
      </mock-styled.div>
      <mock-styled.div
        aria-label="Multi unselected options"
        classname=""
        role="listbox"
      >
        <mock-styled.input
          aria-checked="false"
          aria-hidden="true"
          id="test-static-id"
          role="option"
          type="checkbox"
        />
        <mock-styled.label
          classname="mock-css."
          htmlfor="test-static-id"
          role="option"
          tabindex="0"
        >
          Item one
        </mock-styled.label>
        <mock-styled.input
          aria-checked="false"
          aria-hidden="true"
          id="test-static-id"
          role="option"
          type="checkbox"
        />
        <mock-styled.label
          classname="mock-css."
          htmlfor="test-static-id"
          role="option"
          tabindex="0"
        >
          Item two
        </mock-styled.label>
        <mock-styled.input
          aria-checked="false"
          aria-hidden="true"
          id="test-static-id"
          role="option"
          type="checkbox"
        />
        <mock-styled.label
          classname="mock-css."
          htmlfor="test-static-id"
          role="option"
          tabindex="0"
        >
          Item three
        </mock-styled.label>
      </mock-styled.div>
    </mock-styled.div>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;

exports[`MultiSelectSelected should match a snapshot and render children 1`] = `
{
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <mock-styled.div
        classname=""
      >
        <span>
          Some Value
        </span>
      </mock-styled.div>
    </div>
  </body>,
  "container": <div>
    <mock-styled.div
      classname=""
    >
      <span>
        Some Value
      </span>
    </mock-styled.div>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;

exports[`MultiSelectUnSelected should match a snapshot and render children 1`] = `
{
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <mock-styled.div
        classname=""
      >
        <span>
          Some Value
        </span>
      </mock-styled.div>
    </div>
  </body>,
  "container": <div>
    <mock-styled.div
      classname=""
    >
      <span>
        Some Value
      </span>
    </mock-styled.div>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;
