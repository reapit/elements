// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`FlexContainer should match a snapshot and render children 1`] = `
{
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <div
        class="mock-css.
  display: flex;
  min-height: 0;
  min-width: 0;

  &., {
    background: var(--color-grey-50);
  }

  &., {
    max-width: 1200px;
    margin: 0 auto;
  }
"
      >
        <p>
          I am child
        </p>
      </div>
    </div>
  </body>,
  "container": <div>
    <div
      class="mock-css.
  display: flex;
  min-height: 0;
  min-width: 0;

  &., {
    background: var(--color-grey-50);
  }

  &., {
    max-width: 1200px;
    margin: 0 auto;
  }
"
    >
      <p>
        I am child
      </p>
    </div>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;

exports[`FlexContainer should match a snapshot and render children with all props applied 1`] = `
{
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <div
        class="mock-css.
  display: flex;
  min-height: 0;
  min-width: 0;

  &., {
    background: var(--color-grey-50);
  }

  &., {
    max-width: 1200px;
    margin: 0 auto;
  }
 mock-css.
  flex-direction: row;
 mock-css.
  flex-direction: row-reverse;
 mock-css.
  flex-direction: column;
 mock-css.
  flex-direction: column-reverse;
 mock-css.
  flex-wrap: wrap;
 mock-css.
  flex-wrap: nowrap;
 mock-css.
  flex-wrap: wrap-reverse;
 mock-css.
  flex: 1 1 auto;
 mock-css.
  flex: 0 1 auto;
 mock-css.
  flex-grow: 0;
 mock-css.
  flex-grow: 1;
 mock-css.
  flex-shrink: 0;
 mock-css.
  flex-shrink: 1;
 mock-css.
  justify-content: center;
 mock-css.
  justify-content: flex-end;
 mock-css.
  justify-content: space-between;
 mock-css.
  justify-content: space-around;
 mock-css.
  justify-content: space-evenly;
 mock-css.
  align-items: center;
 mock-css.
  align-items: flex-start;
 mock-css.
  align-items: flex-end;
 mock-css."
      >
        <p>
          I am child
        </p>
      </div>
    </div>
  </body>,
  "container": <div>
    <div
      class="mock-css.
  display: flex;
  min-height: 0;
  min-width: 0;

  &., {
    background: var(--color-grey-50);
  }

  &., {
    max-width: 1200px;
    margin: 0 auto;
  }
 mock-css.
  flex-direction: row;
 mock-css.
  flex-direction: row-reverse;
 mock-css.
  flex-direction: column;
 mock-css.
  flex-direction: column-reverse;
 mock-css.
  flex-wrap: wrap;
 mock-css.
  flex-wrap: nowrap;
 mock-css.
  flex-wrap: wrap-reverse;
 mock-css.
  flex: 1 1 auto;
 mock-css.
  flex: 0 1 auto;
 mock-css.
  flex-grow: 0;
 mock-css.
  flex-grow: 1;
 mock-css.
  flex-shrink: 0;
 mock-css.
  flex-shrink: 1;
 mock-css.
  justify-content: center;
 mock-css.
  justify-content: flex-end;
 mock-css.
  justify-content: space-between;
 mock-css.
  justify-content: space-around;
 mock-css.
  justify-content: space-evenly;
 mock-css.
  align-items: center;
 mock-css.
  align-items: flex-start;
 mock-css.
  align-items: flex-end;
 mock-css."
    >
      <p>
        I am child
      </p>
    </div>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;

exports[`MainContainer should match a snapshot and render children 1`] = `
{
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <main
        class="mock-css.
  display: flex;
  flex-direction: column;
  width: 100%;
  height: 100%;
  overflow-y: visible;
  overflow-x: hidden;
  background: var(--color-white);

  &., {
    background: var(--color-grey-50);
  }

  &., {
    max-width: 1200px;
    margin: 0 auto;
  }
 mock-css."
      >
        <p>
          I am child
        </p>
      </main>
    </div>
  </body>,
  "container": <div>
    <main
      class="mock-css.
  display: flex;
  flex-direction: column;
  width: 100%;
  height: 100%;
  overflow-y: visible;
  overflow-x: hidden;
  background: var(--color-white);

  &., {
    background: var(--color-grey-50);
  }

  &., {
    max-width: 1200px;
    margin: 0 auto;
  }
 mock-css."
    >
      <p>
        I am child
      </p>
    </main>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;

exports[`PageContainer should match a snapshot and render children 1`] = `
{
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <section
        class="mock-css.
  display: block;
  padding: 0.5rem 1.25rem;
  width: 100%;
  height: 100%;
  overflow-y: scroll;
  overflow-x: hidden;
  background-color: var(--color-white);

  , {
    padding: 2.5rem 1.5rem;
  }

  &., {
    height: 100%;
  }

  &., {
    background: var(--color-grey-50);
  }

  &., {
    max-width: 1200px;
    margin: 0 auto;
  }
 mock-css."
      >
        <p>
          I am child
        </p>
      </section>
    </div>
  </body>,
  "container": <div>
    <section
      class="mock-css.
  display: block;
  padding: 0.5rem 1.25rem;
  width: 100%;
  height: 100%;
  overflow-y: scroll;
  overflow-x: hidden;
  background-color: var(--color-white);

  , {
    padding: 2.5rem 1.5rem;
  }

  &., {
    height: 100%;
  }

  &., {
    background: var(--color-grey-50);
  }

  &., {
    max-width: 1200px;
    margin: 0 auto;
  }
 mock-css."
    >
      <p>
        I am child
      </p>
    </section>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;

exports[`SecondaryNavContainer should match a snapshot and render children 1`] = `
{
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <aside
        class="mock-css.
  display: block;
  width: 14rem;
  flex: 0 0 14rem;
  padding: 1.5rem;
  overflow-y: scroll;
  overflow-x: hidden;
  scrollbar-width: none;
  background: var(--color-white);
  border-right: 1px solid var(--color-grey-50);

  &::-webkit-scrollbar {
    display: none;
  }

  , {
    display: none;
  }
"
      >
        <p>
          I am child
        </p>
      </aside>
    </div>
  </body>,
  "container": <div>
    <aside
      class="mock-css.
  display: block;
  width: 14rem;
  flex: 0 0 14rem;
  padding: 1.5rem;
  overflow-y: scroll;
  overflow-x: hidden;
  scrollbar-width: none;
  background: var(--color-white);
  border-right: 1px solid var(--color-grey-50);

  &::-webkit-scrollbar {
    display: none;
  }

  , {
    display: none;
  }
"
    >
      <p>
        I am child
      </p>
    </aside>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;
